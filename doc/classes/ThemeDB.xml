<?xml version="1.0" encoding="UTF-8" ?>
<class name="ThemeDB" inherits="Object" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		A singleton that provides access to static information about [Theme] resources used by the engine and by your project.
	</brief_description>
	<description>
		This singleton provides access to static information about [Theme] resources used by the engine and by your projects. You can fetch the default engine theme, as well as your project configured theme.
		[ThemeDB] also contains fallback values for theme properties.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="add_user_icon">
			<return type="int" enum="Error" />
			<param index="0" name="icon_name" type="String" />
			<param index="1" name="icon_source" type="String" />
			<description>
				Add an Icon to the default theme, which will make it change colors and scale when the default theme is changed from [ProjectSettings].
				[param icon_source] should be a valid SVG [String].
				In SVG source "red" and "#0f0" are replaced with font and accent colors when they are changed from [ProjectSettings].
				[b]Note:[/b] Editor plugins need to remove their user icon(s) when unloaded.
				[codeblock]
				func _enter_tree():
				    var source = FileAccess.get_file_as_string("res://icon.svg")
				    ThemeDB.add_user_icon("my_icon", source)

				func _exit_tree():
				    ThemeDB.remove_user_icon("my_icon")
				[/codeblock]
			</description>
		</method>
		<method name="freeze_default_theme">
			<return type="void" />
			<description>
				Prevents the default theme from emitting changed. This prevents Nodes using the theme from being updated until [method unfreeze_default_theme] is called.
			</description>
		</method>
		<method name="get_default_theme">
			<return type="Theme" />
			<description>
				Returns a reference to the default engine [Theme]. This theme resource is responsible for the out-of-the-box look of [Control] nodes and can be customized from [ProjectSettings].
			</description>
		</method>
		<method name="get_icon">
			<return type="ImageTexture" />
			<param index="0" name="icon_name" type="String" />
			<description>
				Returns an internal icon from the fallback theme, internal theme icons are the default icons that comes with Blazium.
			</description>
		</method>
		<method name="get_icon_list">
			<return type="PackedStringArray" />
			<description>
				Returns a list for all the icon names that are used internally for the default theme.
			</description>
		</method>
		<method name="get_project_theme">
			<return type="Theme" />
			<description>
				Returns a reference to the custom project [Theme]. This theme resources allows to override the default engine theme for every control node in the project.
				To set the project theme, see [member ProjectSettings.gui/theme/custom].
			</description>
		</method>
		<method name="get_user_icon">
			<return type="ImageTexture" />
			<param index="0" name="icon_name" type="String" />
			<description>
				Returns a user icon from the default theme.
			</description>
		</method>
		<method name="get_user_icon_list">
			<return type="PackedStringArray" />
			<description>
				Returns a list for all the user icon names.
			</description>
		</method>
		<method name="has_icon">
			<return type="bool" />
			<param index="0" name="icon_name" type="String" />
			<description>
				Returns whether the default theme has an internal icon with [param icon_name].
			</description>
		</method>
		<method name="has_user_icon">
			<return type="bool" />
			<param index="0" name="icon_name" type="String" />
			<description>
				Returns whether the default theme has a user icon with [param icon_name].
			</description>
		</method>
		<method name="is_default_theme_frozen" qualifiers="const">
			<return type="bool" />
			<description>
				Returns whether the default theme is frozen.
			</description>
		</method>
		<method name="remove_user_icon">
			<return type="int" enum="Error" />
			<param index="0" name="icon_name" type="String" />
			<description>
				Removes a user icon that was previously added to the default theme.
			</description>
		</method>
		<method name="unfreeze_default_theme">
			<return type="void" />
			<description>
				Emits [signal Resource.changed] if the default theme was already frozen. Also check [method freeze_default_theme].
			</description>
		</method>
	</methods>
	<members>
		<member name="fallback_base_scale" type="float" setter="set_fallback_base_scale" getter="get_fallback_base_scale" default="1.0">
			The fallback base scale factor of every [Control] node and [Theme] resource. Used when no other value is available to the control.
			See also [member Theme.default_base_scale].
		</member>
		<member name="fallback_font" type="Font" setter="set_fallback_font" getter="get_fallback_font">
			The fallback font of every [Control] node and [Theme] resource. Used when no other value is available to the control.
			See also [member Theme.default_font].
		</member>
		<member name="fallback_font_size" type="int" setter="set_fallback_font_size" getter="get_fallback_font_size" default="16">
			The fallback font size of every [Control] node and [Theme] resource. Used when no other value is available to the control.
			See also [member Theme.default_font_size].
		</member>
		<member name="fallback_icon" type="Texture2D" setter="set_fallback_icon" getter="get_fallback_icon">
			The fallback icon of every [Control] node and [Theme] resource. Used when no other value is available to the control.
		</member>
		<member name="fallback_stylebox" type="StyleBox" setter="set_fallback_stylebox" getter="get_fallback_stylebox">
			The fallback stylebox of every [Control] node and [Theme] resource. Used when no other value is available to the control.
		</member>
	</members>
	<signals>
		<signal name="border_padding_changed">
			<description>
				Emits when the default theme padding or border width are changed from [ProjectSettings].
				Used internally to update the internal margin of the nodes that has a focus [StyleBox].
				Use [code]ThemeDB.get_default_theme().get_constant("border_padding", "Constants")[/code] to get the changed value.
			</description>
		</signal>
		<signal name="border_width_changed">
			<description>
				Emits when the default theme border width is changed from [ProjectSettings].
				Use [code]ThemeDB.get_default_theme().get_constant("border_width", "Constants")[/code] to get the changed value.
			</description>
		</signal>
		<signal name="colors_changed">
			<description>
				Emits when any of the theme colors are changed from the [ProjectSettings].
				Use [code]ThemeDB.get_default_theme().get_color("base_color", "Colors")[/code] to get the changed value.
				Valid options are base_color, accent_color, accent_color2, bg_color, bg_color2, normal_color, pressed_color, hover_color, disabled_color, mono_color, font_color, and font_outline_color.
			</description>
		</signal>
		<signal name="corner_radius_changed">
			<description>
				Emits when the default theme corner radius is changed from [ProjectSettings].
				Use [code]ThemeDB.get_default_theme().get_constant("corner_radius", "Constants")[/code] to get the changed value.
				[b]Note:[/b] To get the corner radius used for focus style, use [code]ThemeDB.get_default_theme().get_constant("focus_corners", "Constants")[/code].
			</description>
		</signal>
		<signal name="fallback_changed">
			<description>
				Emitted when one of the fallback values had been changed. Use it to refresh the look of controls that may rely on the fallback theme items.
			</description>
		</signal>
		<signal name="font_changed">
			<description>
				Emits when the project font is changed from [ProjectSettings].
				Use [code]ThemeDB.get_default_theme().get_default_font()[/code] to get the new font, if the new font is null, the fallback font is used instead.
			</description>
		</signal>
		<signal name="font_color_changed">
			<description>
				Emits when the default theme font color is changed from [ProjectSettings].
				Use [code]ThemeDB.get_default_theme().get_color("font_color", "Colors")[/code] to get the changed value.
			</description>
		</signal>
		<signal name="font_outline_color_changed">
			<description>
				Emits when the default theme font outline color is changed from [ProjectSettings].
				Use [code]ThemeDB.get_default_theme().get_color("font_outline_color", "Colors")[/code] to get the changed value.
			</description>
		</signal>
		<signal name="font_outline_size_changed">
			<description>
				Emits when the default theme font outline size is changed from [ProjectSettings].
				Use [code]ThemeDB.get_default_theme().get_constant("font_outline_size", "Constants")[/code] to get the changed value.
			</description>
		</signal>
		<signal name="font_size_changed">
			<description>
				Emits when the default theme font size is changed from [ProjectSettings].
				Use [code]ThemeDB.get_default_theme().get_default_font_size()[/code] to get the changed value.
			</description>
		</signal>
		<signal name="icons_changed">
			<description>
				Emits when the theme icons scale or colors changes.
			</description>
		</signal>
		<signal name="margin_changed">
			<description>
				Emits when the default theme margin is changed from [ProjectSettings].
				[b]Note:[/b] The margin is used for internal separation and not the content margins which uses padding, check [signal padding_changed].
				Use [code]ThemeDB.get_default_theme().get_constant("margin", "Constants")[/code] to get the changed value.
			</description>
		</signal>
		<signal name="padding_changed">
			<description>
				Emits when the default theme padding is changed from [ProjectSettings].
				Use [code]ThemeDB.get_default_theme().get_constant("padding", "Constants")[/code] to get the changed value.
			</description>
		</signal>
		<signal name="scale_changed">
			<description>
				Emits when the default theme scale is changed from [ProjectSettings].
				Use [code]ThemeDB.get_default_theme().get_default_base_scale()[/code] to get the changed value.
			</description>
		</signal>
		<signal name="theme_changed">
			<description>
				Emits when any property that has a path starting with "gui/theme/" is changed from [ProjectSettings].
			</description>
		</signal>
	</signals>
</class>
